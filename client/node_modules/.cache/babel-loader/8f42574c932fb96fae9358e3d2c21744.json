{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\n\nfunction useInterval(fn, interval) {\n  const [active, setActive] = useState(false);\n  const intervalRef = useRef();\n  const fnRef = useRef();\n  useEffect(() => {\n    fnRef.current = fn;\n  }, [fn]);\n\n  const start = () => {\n    setActive(old => {\n      if (!old) {\n        intervalRef.current = window.setInterval(fnRef.current, interval);\n      }\n\n      return true;\n    });\n  };\n\n  const stop = () => {\n    setActive(false);\n    window.clearInterval(intervalRef.current);\n  };\n\n  const toggle = () => {\n    if (active) {\n      stop();\n    } else {\n      start();\n    }\n  };\n\n  return {\n    start,\n    stop,\n    toggle,\n    active\n  };\n}\n\nexport { useInterval };","map":{"version":3,"mappings":";;AACO,SAASA,WAAT,CAAqBC,EAArB,EAAyBC,QAAzB,EAAmC;AACxC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBC,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMC,WAAW,GAAGC,MAAM,EAA1B;AACA,QAAMC,KAAK,GAAGD,MAAM,EAApB;AACAE,WAAS,CAAC,MAAM;AACdD,SAAK,CAACE,OAAN,GAAgBT,EAAhB;AACD,GAFQ,EAEN,CAACA,EAAD,CAFM,CAAT;;AAGA,QAAMU,KAAK,GAAG,MAAM;AAClBP,aAAS,CAAEQ,GAAD,IAAS;AACjB,UAAI,CAACA,GAAL,EAAU;AACRN,mBAAW,CAACI,OAAZ,GAAsBG,MAAM,CAACC,WAAP,CAAmBN,KAAK,CAACE,OAAzB,EAAkCR,QAAlC,CAAtB;AACD;;AACD,aAAO,IAAP;AACD,KALQ,CAAT;AAMD,GAPD;;AAQA,QAAMa,IAAI,GAAG,MAAM;AACjBX,aAAS,CAAC,KAAD,CAAT;AACAS,UAAM,CAACG,aAAP,CAAqBV,WAAW,CAACI,OAAjC;AACD,GAHD;;AAIA,QAAMO,MAAM,GAAG,MAAM;AACnB,QAAId,MAAJ,EAAY;AACVY,UAAI;AACL,KAFD,MAEO;AACLJ,WAAK;AACN;AACF,GAND;;AAOA,SAAO;AAAEA,SAAF;AAASI,QAAT;AAAeE,UAAf;AAAuBd;AAAvB,GAAP;AACF","names":["useInterval","fn","interval","active","setActive","useState","intervalRef","useRef","fnRef","useEffect","current","start","old","window","setInterval","stop","clearInterval","toggle"],"sources":["C:\\Users\\kskor\\OneDrive\\Desktop\\SHRUTI\\Sem 5\\WT\\client\\node_modules\\@mantine\\hooks\\src\\use-interval\\use-interval.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport function useInterval(fn: () => void, interval: number) {\n  const [active, setActive] = useState(false);\n  const intervalRef = useRef<number>();\n  const fnRef = useRef<() => void>();\n\n  useEffect(() => {\n    fnRef.current = fn;\n  }, [fn]);\n\n  const start = () => {\n    setActive((old) => {\n      if (!old) {\n        intervalRef.current = window.setInterval(fnRef.current, interval);\n      }\n      return true;\n    });\n  };\n\n  const stop = () => {\n    setActive(false);\n    window.clearInterval(intervalRef.current);\n  };\n\n  const toggle = () => {\n    if (active) {\n      stop();\n    } else {\n      start();\n    }\n  };\n\n  return { start, stop, toggle, active };\n}\n"]},"metadata":{},"sourceType":"module"}