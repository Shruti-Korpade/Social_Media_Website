{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport * as React from 'react';\nimport useLatest from 'use-latest';\nimport useComposedRef from 'use-composed-ref';\nvar HIDDEN_TEXTAREA_STYLE = {\n  'min-height': '0',\n  'max-height': 'none',\n  height: '0',\n  visibility: 'hidden',\n  overflow: 'hidden',\n  position: 'absolute',\n  'z-index': '-1000',\n  top: '0',\n  right: '0'\n};\n\nvar forceHiddenStyles = function forceHiddenStyles(node) {\n  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function (key) {\n    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');\n  });\n};\n\nvar forceHiddenStyles$1 = forceHiddenStyles; // TODO: use labelled tuples once they are avaiable:\n//   export type CalculatedNodeHeights = [height: number, rowHeight: number];\n// https://github.com/microsoft/TypeScript/issues/28259\n\nvar hiddenTextarea = null;\n\nvar getHeight = function getHeight(node, sizingData) {\n  var height = node.scrollHeight;\n\n  if (sizingData.sizingStyle.boxSizing === 'border-box') {\n    // border-box: add border, since height = content + padding + border\n    return height + sizingData.borderSize;\n  } // remove padding, since height = content\n\n\n  return height - sizingData.paddingSize;\n};\n\nfunction calculateNodeHeight(sizingData, value, minRows, maxRows) {\n  if (minRows === void 0) {\n    minRows = 1;\n  }\n\n  if (maxRows === void 0) {\n    maxRows = Infinity;\n  }\n\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    hiddenTextarea.setAttribute('tabindex', '-1');\n    hiddenTextarea.setAttribute('aria-hidden', 'true');\n    forceHiddenStyles$1(hiddenTextarea);\n  }\n\n  if (hiddenTextarea.parentNode === null) {\n    document.body.appendChild(hiddenTextarea);\n  }\n\n  var paddingSize = sizingData.paddingSize,\n      borderSize = sizingData.borderSize,\n      sizingStyle = sizingData.sizingStyle;\n  var boxSizing = sizingStyle.boxSizing;\n  Object.keys(sizingStyle).forEach(function (_key) {\n    var key = _key;\n    hiddenTextarea.style[key] = sizingStyle[key];\n  });\n  forceHiddenStyles$1(hiddenTextarea);\n  hiddenTextarea.value = value;\n  var height = getHeight(hiddenTextarea, sizingData); // Double set and calc due to Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1795904\n\n  hiddenTextarea.value = value;\n  height = getHeight(hiddenTextarea, sizingData); // measure height of a textarea with a single row\n\n  hiddenTextarea.value = 'x';\n  var rowHeight = hiddenTextarea.scrollHeight - paddingSize;\n  var minHeight = rowHeight * minRows;\n\n  if (boxSizing === 'border-box') {\n    minHeight = minHeight + paddingSize + borderSize;\n  }\n\n  height = Math.max(minHeight, height);\n  var maxHeight = rowHeight * maxRows;\n\n  if (boxSizing === 'border-box') {\n    maxHeight = maxHeight + paddingSize + borderSize;\n  }\n\n  height = Math.min(maxHeight, height);\n  return [height, rowHeight];\n}\n\nvar noop = function noop() {};\n\nvar pick = function pick(props, obj) {\n  return props.reduce(function (acc, prop) {\n    acc[prop] = obj[prop];\n    return acc;\n  }, {});\n};\n\nvar SIZING_STYLE = ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'boxSizing', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'lineHeight', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', // non-standard\n'tabSize', 'textIndent', // non-standard\n'textRendering', 'textTransform', 'width', 'wordBreak'];\nvar isIE = !!document.documentElement.currentStyle;\n\nvar getSizingData = function getSizingData(node) {\n  var style = window.getComputedStyle(node);\n\n  if (style === null) {\n    return null;\n  }\n\n  var sizingStyle = pick(SIZING_STYLE, style);\n  var boxSizing = sizingStyle.boxSizing; // probably node is detached from DOM, can't read computed dimensions\n\n  if (boxSizing === '') {\n    return null;\n  } // IE (Edge has already correct behaviour) returns content width as computed width\n  // so we need to add manually padding and border widths\n\n\n  if (isIE && boxSizing === 'border-box') {\n    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + 'px';\n  }\n\n  var paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);\n  var borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);\n  return {\n    sizingStyle: sizingStyle,\n    paddingSize: paddingSize,\n    borderSize: borderSize\n  };\n};\n\nvar getSizingData$1 = getSizingData;\n\nfunction useListener(target, type, listener) {\n  var latestListener = useLatest(listener);\n  React.useLayoutEffect(function () {\n    var handler = function handler(ev) {\n      return latestListener.current(ev);\n    }; // might happen if document.fonts is not defined, for instance\n\n\n    if (!target) {\n      return;\n    }\n\n    target.addEventListener(type, handler);\n    return function () {\n      return target.removeEventListener(type, handler);\n    };\n  }, []);\n}\n\nvar useWindowResizeListener = function useWindowResizeListener(listener) {\n  useListener(window, 'resize', listener);\n};\n\nvar useFontsLoadedListener = function useFontsLoadedListener(listener) {\n  useListener(document.fonts, 'loadingdone', listener);\n};\n\nvar _excluded = [\"cacheMeasurements\", \"maxRows\", \"minRows\", \"onChange\", \"onHeightChange\"];\n\nvar TextareaAutosize = function TextareaAutosize(_ref, userRef) {\n  var cacheMeasurements = _ref.cacheMeasurements,\n      maxRows = _ref.maxRows,\n      minRows = _ref.minRows,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,\n      _ref$onHeightChange = _ref.onHeightChange,\n      onHeightChange = _ref$onHeightChange === void 0 ? noop : _ref$onHeightChange,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  if (props.style) {\n    if ('maxHeight' in props.style) {\n      throw new Error('Using `style.maxHeight` for <TextareaAutosize/> is not supported. Please use `maxRows`.');\n    }\n\n    if ('minHeight' in props.style) {\n      throw new Error('Using `style.minHeight` for <TextareaAutosize/> is not supported. Please use `minRows`.');\n    }\n  }\n\n  var isControlled = props.value !== undefined;\n  var libRef = React.useRef(null);\n  var ref = useComposedRef(libRef, userRef);\n  var heightRef = React.useRef(0);\n  var measurementsCacheRef = React.useRef();\n\n  var resizeTextarea = function resizeTextarea() {\n    var node = libRef.current;\n    var nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData$1(node);\n\n    if (!nodeSizingData) {\n      return;\n    }\n\n    measurementsCacheRef.current = nodeSizingData;\n\n    var _calculateNodeHeight = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || 'x', minRows, maxRows),\n        height = _calculateNodeHeight[0],\n        rowHeight = _calculateNodeHeight[1];\n\n    if (heightRef.current !== height) {\n      heightRef.current = height;\n      node.style.setProperty('height', height + \"px\", 'important');\n      onHeightChange(height, {\n        rowHeight: rowHeight\n      });\n    }\n  };\n\n  var handleChange = function handleChange(event) {\n    if (!isControlled) {\n      resizeTextarea();\n    }\n\n    onChange(event);\n  };\n\n  {\n    React.useLayoutEffect(resizeTextarea);\n    useWindowResizeListener(resizeTextarea);\n    useFontsLoadedListener(resizeTextarea);\n    return /*#__PURE__*/React.createElement(\"textarea\", _extends({}, props, {\n      onChange: handleChange,\n      ref: ref\n    }));\n  }\n};\n\nvar index = /* #__PURE__ */React.forwardRef(TextareaAutosize);\nexport { index as default };","map":{"version":3,"sources":["C:/Users/kskor/OneDrive/Desktop/SHRUTI/Sem 5/WT/client/node_modules/react-textarea-autosize/dist/react-textarea-autosize.browser.development.esm.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","useLatest","useComposedRef","HIDDEN_TEXTAREA_STYLE","height","visibility","overflow","position","top","right","forceHiddenStyles","node","Object","keys","forEach","key","style","setProperty","forceHiddenStyles$1","hiddenTextarea","getHeight","sizingData","scrollHeight","sizingStyle","boxSizing","borderSize","paddingSize","calculateNodeHeight","value","minRows","maxRows","Infinity","document","createElement","setAttribute","parentNode","body","appendChild","_key","rowHeight","minHeight","Math","max","maxHeight","min","noop","pick","props","obj","reduce","acc","prop","SIZING_STYLE","isIE","documentElement","currentStyle","getSizingData","window","getComputedStyle","width","parseFloat","borderRightWidth","borderLeftWidth","paddingRight","paddingLeft","paddingBottom","paddingTop","borderBottomWidth","borderTopWidth","getSizingData$1","useListener","target","type","listener","latestListener","useLayoutEffect","handler","ev","current","addEventListener","removeEventListener","useWindowResizeListener","useFontsLoadedListener","fonts","_excluded","TextareaAutosize","_ref","userRef","cacheMeasurements","_ref$onChange","onChange","_ref$onHeightChange","onHeightChange","Error","isControlled","undefined","libRef","useRef","ref","heightRef","measurementsCacheRef","resizeTextarea","nodeSizingData","_calculateNodeHeight","placeholder","handleChange","event","index","forwardRef","default"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport * as React from 'react';\nimport useLatest from 'use-latest';\nimport useComposedRef from 'use-composed-ref';\n\nvar HIDDEN_TEXTAREA_STYLE = {\n  'min-height': '0',\n  'max-height': 'none',\n  height: '0',\n  visibility: 'hidden',\n  overflow: 'hidden',\n  position: 'absolute',\n  'z-index': '-1000',\n  top: '0',\n  right: '0'\n};\nvar forceHiddenStyles = function forceHiddenStyles(node) {\n  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function (key) {\n    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');\n  });\n};\nvar forceHiddenStyles$1 = forceHiddenStyles;\n\n// TODO: use labelled tuples once they are avaiable:\n//   export type CalculatedNodeHeights = [height: number, rowHeight: number];\n// https://github.com/microsoft/TypeScript/issues/28259\n\nvar hiddenTextarea = null;\nvar getHeight = function getHeight(node, sizingData) {\n  var height = node.scrollHeight;\n  if (sizingData.sizingStyle.boxSizing === 'border-box') {\n    // border-box: add border, since height = content + padding + border\n    return height + sizingData.borderSize;\n  }\n\n  // remove padding, since height = content\n  return height - sizingData.paddingSize;\n};\nfunction calculateNodeHeight(sizingData, value, minRows, maxRows) {\n  if (minRows === void 0) {\n    minRows = 1;\n  }\n  if (maxRows === void 0) {\n    maxRows = Infinity;\n  }\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    hiddenTextarea.setAttribute('tabindex', '-1');\n    hiddenTextarea.setAttribute('aria-hidden', 'true');\n    forceHiddenStyles$1(hiddenTextarea);\n  }\n  if (hiddenTextarea.parentNode === null) {\n    document.body.appendChild(hiddenTextarea);\n  }\n  var paddingSize = sizingData.paddingSize,\n    borderSize = sizingData.borderSize,\n    sizingStyle = sizingData.sizingStyle;\n  var boxSizing = sizingStyle.boxSizing;\n  Object.keys(sizingStyle).forEach(function (_key) {\n    var key = _key;\n    hiddenTextarea.style[key] = sizingStyle[key];\n  });\n  forceHiddenStyles$1(hiddenTextarea);\n  hiddenTextarea.value = value;\n  var height = getHeight(hiddenTextarea, sizingData);\n  // Double set and calc due to Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1795904\n  hiddenTextarea.value = value;\n  height = getHeight(hiddenTextarea, sizingData);\n\n  // measure height of a textarea with a single row\n  hiddenTextarea.value = 'x';\n  var rowHeight = hiddenTextarea.scrollHeight - paddingSize;\n  var minHeight = rowHeight * minRows;\n  if (boxSizing === 'border-box') {\n    minHeight = minHeight + paddingSize + borderSize;\n  }\n  height = Math.max(minHeight, height);\n  var maxHeight = rowHeight * maxRows;\n  if (boxSizing === 'border-box') {\n    maxHeight = maxHeight + paddingSize + borderSize;\n  }\n  height = Math.min(maxHeight, height);\n  return [height, rowHeight];\n}\n\nvar noop = function noop() {};\nvar pick = function pick(props, obj) {\n  return props.reduce(function (acc, prop) {\n    acc[prop] = obj[prop];\n    return acc;\n  }, {});\n};\n\nvar SIZING_STYLE = ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'boxSizing', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'lineHeight', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop',\n// non-standard\n'tabSize', 'textIndent',\n// non-standard\n'textRendering', 'textTransform', 'width', 'wordBreak'];\nvar isIE = !!document.documentElement.currentStyle ;\nvar getSizingData = function getSizingData(node) {\n  var style = window.getComputedStyle(node);\n  if (style === null) {\n    return null;\n  }\n  var sizingStyle = pick(SIZING_STYLE, style);\n  var boxSizing = sizingStyle.boxSizing;\n\n  // probably node is detached from DOM, can't read computed dimensions\n  if (boxSizing === '') {\n    return null;\n  }\n\n  // IE (Edge has already correct behaviour) returns content width as computed width\n  // so we need to add manually padding and border widths\n  if (isIE && boxSizing === 'border-box') {\n    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + 'px';\n  }\n  var paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);\n  var borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);\n  return {\n    sizingStyle: sizingStyle,\n    paddingSize: paddingSize,\n    borderSize: borderSize\n  };\n};\nvar getSizingData$1 = getSizingData;\n\nfunction useListener(target, type, listener) {\n  var latestListener = useLatest(listener);\n  React.useLayoutEffect(function () {\n    var handler = function handler(ev) {\n      return latestListener.current(ev);\n    };\n\n    // might happen if document.fonts is not defined, for instance\n    if (!target) {\n      return;\n    }\n    target.addEventListener(type, handler);\n    return function () {\n      return target.removeEventListener(type, handler);\n    };\n  }, []);\n}\nvar useWindowResizeListener = function useWindowResizeListener(listener) {\n  useListener(window, 'resize', listener);\n};\nvar useFontsLoadedListener = function useFontsLoadedListener(listener) {\n  useListener(document.fonts, 'loadingdone', listener);\n};\n\nvar _excluded = [\"cacheMeasurements\", \"maxRows\", \"minRows\", \"onChange\", \"onHeightChange\"];\nvar TextareaAutosize = function TextareaAutosize(_ref, userRef) {\n  var cacheMeasurements = _ref.cacheMeasurements,\n    maxRows = _ref.maxRows,\n    minRows = _ref.minRows,\n    _ref$onChange = _ref.onChange,\n    onChange = _ref$onChange === void 0 ? noop : _ref$onChange,\n    _ref$onHeightChange = _ref.onHeightChange,\n    onHeightChange = _ref$onHeightChange === void 0 ? noop : _ref$onHeightChange,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  if (props.style) {\n    if ('maxHeight' in props.style) {\n      throw new Error('Using `style.maxHeight` for <TextareaAutosize/> is not supported. Please use `maxRows`.');\n    }\n    if ('minHeight' in props.style) {\n      throw new Error('Using `style.minHeight` for <TextareaAutosize/> is not supported. Please use `minRows`.');\n    }\n  }\n  var isControlled = props.value !== undefined;\n  var libRef = React.useRef(null);\n  var ref = useComposedRef(libRef, userRef);\n  var heightRef = React.useRef(0);\n  var measurementsCacheRef = React.useRef();\n  var resizeTextarea = function resizeTextarea() {\n    var node = libRef.current;\n    var nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData$1(node);\n    if (!nodeSizingData) {\n      return;\n    }\n    measurementsCacheRef.current = nodeSizingData;\n    var _calculateNodeHeight = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || 'x', minRows, maxRows),\n      height = _calculateNodeHeight[0],\n      rowHeight = _calculateNodeHeight[1];\n    if (heightRef.current !== height) {\n      heightRef.current = height;\n      node.style.setProperty('height', height + \"px\", 'important');\n      onHeightChange(height, {\n        rowHeight: rowHeight\n      });\n    }\n  };\n  var handleChange = function handleChange(event) {\n    if (!isControlled) {\n      resizeTextarea();\n    }\n    onChange(event);\n  };\n  {\n    React.useLayoutEffect(resizeTextarea);\n    useWindowResizeListener(resizeTextarea);\n    useFontsLoadedListener(resizeTextarea);\n    return /*#__PURE__*/React.createElement(\"textarea\", _extends({}, props, {\n      onChange: handleChange,\n      ref: ref\n    }));\n  }\n};\nvar index = /* #__PURE__ */React.forwardRef(TextareaAutosize);\n\nexport { index as default };\n"]},"metadata":{},"sourceType":"module"}